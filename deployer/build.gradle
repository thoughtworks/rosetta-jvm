apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'clojure'
apply plugin: 'application'

mainClassName = 'rosettajvm.deployment.Deployer'
warnOnReflection = false
aotCompile = true

sourceSets {
  main {
    clojure {
      srcDirs 'src/main/clojure'
    }
  }
}

configurations.all {
  resolutionStrategy {
    force 'org.clojure:clojure:1.4.0'
  }
}

dependencies {
  compile 'org.clojure:clojure:1.4.0'
  compile 'org.clojure:tools.cli:0.2.2'
  compile 'org.clojure:tools.logging:0.2.6'

  compile 'clj-time:clj-time:0.4.4'

  compile 'compojure:compojure:1.1.5'
  compile 'ring:ring-jetty-adapter:1.1.7'
  compile 'cheshire:cheshire:5.0.1'

  compile 'com.palletops:pallet:0.8.0-beta.2'
  compile 'com.palletops:java-crate:0.8.0-beta.1'
  compile 'org.cloudhoist:pallet-jclouds:1.5.2'
  compile 'org.cloudhoist:pallet-vmfest:0.3.0-alpha.2'
  compile 'org.clojars.tbatchelli:vboxjxpcom:4.2.4'
  compile 'org.jclouds:jclouds-allblobstore:1.5.5'
  compile 'org.jclouds:jclouds-allcompute:1.5.5'
  compile 'org.jclouds.driver:jclouds-sshj:1.5.5'
  compile 'org.jclouds.driver:jclouds-slf4j:1.5.5'

  compile 'org.slf4j:slf4j-api:1.7.2'
  compile 'org.slf4j:jul-to-slf4j:1.7.2'
  compile 'org.slf4j:jcl-over-slf4j:1.7.2'
  compile 'org.slf4j:log4j-over-slf4j:1.7.2'
  compile 'ch.qos.logback:logback-classic:1.0.9'
}

jar {
  exclude "META-INF/*.SF"
  exclude "META-INF/*.DSA"
  exclude "META-INF/*.RSA"
  from {
    configurations.compile.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
  manifest { attributes 'Main-Class': mainClassName }
}

assemble.dependsOn << ['distTar', 'distZip']

task(provision, type: JavaExec, dependsOn: ['classes']) {
  main 'rosettajvm.deployment.Provisioner'
  classpath runtimeClasspath
  args = [System.getProperty("args", "up aws").split(" ")].flatten()
}
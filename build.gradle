buildscript {
  repositories {
    mavenRepo name: 'clojars', url: 'http://clojars.org/repo'
  }
  dependencies {
    classpath 'clojuresque:clojuresque:1.5.2'
  }
}

allprojects {
  apply plugin: 'idea'

  repositories {
    mavenCentral()
    maven {
      url 'http://gemjars.org/maven'
    }
    maven {
      url 'http://clojars.org/repo'
    }
  }
}

idea {
  project {
    ipr {
      withXml {
        def project = it.asNode()

        // Configure clojure source copying and AOT compilation
        project.append(node().component(name: 'ClojureCompilerSettings') {
          option(name: 'COMPILE_CLOJURE', value: 'true')
          option(name: 'CLOJURE_BEFORE', value: 'true')
          option(name: 'COPY_CLJ_SOURCES', value: 'true')
        })

        // Automatically set up Git support
        project.append(node().component(name: 'VcsDirectoryMappings') {
          mapping(directory: '$PROJECT_DIR$', vcs: 'Git')
        })

        // Disable annoying popup asking to configure frameworks
        project.append(node().component(name: 'FrameworkDetectionExcludesConfiguration') {
          type(id: 'JRUBY')
          type(id: 'Python')
        })

        // Add run configurations
        project.append(node().component(name: 'ProjectRunConfigurationManager') {
          buildConfiguration(delegate,
              'service',
              'rspec',
              'org.jruby.Main',
              'classpath:bin/rspec -Iservice/src/test/ruby service/src/test/ruby')

          buildConfiguration(delegate,
              'service',
              'boot',
              'rosetta.boot.Main',
              "--assets $projectDir/service/src/main/resources/assets",
          )
        })
      }
    }
  }
}

def node() {
  new NodeBuilder()
}

def buildConfiguration(builder, moduleName, runConfigurationName, mainClassName, programParameters = '') {
  builder.configuration(default: 'false', factoryName: 'Application', name: moduleName + ':' + runConfigurationName, type: 'Application') {
    extension(enabled: 'false', merge: 'false', name: 'coverage', runner: 'idea')
    option(name: 'MAIN_CLASS_NAME', value: mainClassName)
    option(name: 'VM_PARAMETERS', value: '-DDEBUG=true')
    option(name: 'PROGRAM_PARAMETERS', value: programParameters)
    option(name: 'WORKING_DIRECTORY', value: 'file://$PROJECT_DIR$')
    option(name: 'ALTERNATIVE_JRE_PATH_ENABLED', value: 'false')
    option(name: 'ALTERNATIVE_JRE_PATH', value: '')
    option(name: 'ENABLE_SWING_INSPECTOR', value: 'false')
    option(name: 'ENV_VARIABLES')
    option(name: 'PASS_PARENT_ENVS', value: 'true')
    module(name: moduleName)
    envs()
    ConfigurationWrapper(RunnerId: 'Debug')
    method()
    RunnerSettings(RunnerId: 'Debug') {
      option(name: 'DEBUG_PORT', value: '54451')
      option(name: 'TRANSPORT', value: '0')
      option(name: 'LOCAL', value: 'true')
    }
  }
}
